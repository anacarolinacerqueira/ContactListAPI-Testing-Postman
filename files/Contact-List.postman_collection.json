{
	"info": {
		"_postman_id": "4baab1c4-1c1a-4e07-af59-2f924f6be159",
		"name": "Contact-List",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add new contact",
			"item": [
				{
					"name": "Positive Path Tests",
					"item": [
						{
							"name": "Successful Add new Contact",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"idUser\", jsonData._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful Add a second new Contact",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const contactSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_id\": {\"type\": \"string\"},",
									"        \"firstName\": {\"type\": \"string\"},",
									"        \"lastName\": {\"type\": \"string\"},",
									"        \"birthdate\": {\"type\": \"string\"},",
									"        \"email\": {\"type\": \"string\"},",
									"        \"phone\": {\"type\": \"string\"},",
									"        \"street1\": {\"type\": \"string\"},",
									"        \"street2\": {\"type\": \"string\"},",
									"        \"city\": {\"type\": \"string\"},",
									"        \"stateProvince\": {\"type\": \"string\"},",
									"        \"postalCode\": {\"type\": \"string\"},",
									"        \"country\": {\"type\": \"string\"},",
									"        \"owner\": {\"type\": \"string\"},",
									"        \"__v\": {\"type\": \"integer\"},",
									"    },",
									"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\",  \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
									"};",
									"",
									"pm.test(\"Validate that returned JSON schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(contactSchema);",
									"});",
									"",
									"pm.test(\"Validate that a successful request to add a contact returns a JSON body format\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"/* PRINTING USER INFORMATIONS VARIABLES AS A SIMPLE LOG */",
									"console.info(\"----------------- USER INFORMATIONS ---------------\");",
									"console.info(\"First Name: \" + (pm.collectionVariables.get('firstName_')));",
									"console.info(\"Last Name: \" + (pm.collectionVariables.get('lastName_')));",
									"console.info(\"Phone Number: \" + (pm.collectionVariables.get('phone_')));",
									"console.info(\"E-mail: \" + (pm.collectionVariables.get('email_')));",
									"console.info(\"Country: \" + (pm.collectionVariables.get('country_')));",
									"",
									"/* TO SET VARIABLES FROM RESPONSE BODY: ",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"collection_variable_name\", jsonData.json_response_field);",
									"*/"
								]
							}
						}
					]
				},
				{
					"name": "Negative Path Tests",
					"item": [
						{
							"name": "Failure to Add new Contact sending empty value to firstName field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.firstName.message).to.eql(\"Path `firstName` is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Add new Contact sending  empty value to lastName field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.lastName.message).to.eql(\"Path `lastName` is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Add new Contact sending  empty value to birthDate field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.birthdate.message).to.eql(\"Birthdate is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \" \",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Add new Contact sending invalid value to birthDate field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"birthdate\", \"random\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.birthdate.message).to.eql(\"Birthdate is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Add new Contact sending invalid value to email field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"email\", \"3432rf345f\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.email.message).to.eql(\"Email is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{email}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Add new Contact sending empty to email field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.email.message).to.eql(\"Email is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Add new Contact sending invalid value to phone field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"PhoneNumber\", \"123\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.phone.message).to.eql(\"Phone number is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"7777\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const emptySchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"    \"errors\":{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"firstName\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": {\"type\": \"string\"},",
									"                    \"message\": {\"type\": \"string\"},",
									"                    \"properties\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\":{",
									"                            \"message\": {\"type\": \"string\"},",
									"                            \"type\": {\"type\": \"string\"},",
									"                            \"path\": {\"type\": \"string\"},",
									"                            \"value\": {\"type\": \"string\"}",
									"                        },",
									"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
									"                    },",
									"                    \"kind\": {\"type\": \"string\"},",
									"                    \"path\": {\"type\": \"string\"},",
									"                    \"value\": {\"type\": \"string\"},",
									"                },",
									"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
									"                },",
									"                \"_message\": {\"type\": \"string\"},",
									"                \"message\": {\"type\": \"string\"},",
									"            },",
									"        } ",
									"    },",
									"    \"required\": [\"errors\", \"message\", \"_message\"],",
									"};",
									"",
									"pm.test(\"returned JSON schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(emptySchema);",
									"});",
									"",
									"pm.test(\"failure request to add a contact returns a JSON body format with correct fields\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"birthdate\", \"1994-12-01\");",
							"pm.collectionVariables.set(\"postalCode\", \"40210\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Get contacts",
			"item": [
				{
					"name": "Get a Contact by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const contactSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_id\": {\"type\": \"string\"},",
									"        \"firstName\": {\"type\": \"string\"},",
									"        \"lastName\": {\"type\": \"string\"},",
									"        \"birthdate\": {\"type\": \"string\"},",
									"        \"email\": {\"type\": \"string\"},",
									"        \"phone\": {\"type\": \"string\"},",
									"        \"street1\": {\"type\": \"string\"},",
									"        \"street2\": {\"type\": \"string\"},",
									"        \"city\": {\"type\": \"string\"},",
									"        \"stateProvince\": {\"type\": \"string\"},",
									"        \"postalCode\": {\"type\": \"string\"},",
									"        \"country\": {\"type\": \"string\"},",
									"        \"owner\": {\"type\": \"string\"},",
									"        \"__v\": {\"type\": \"integer\"},",
									"    },",
									"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\",  \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
									"};",
									"",
									"pm.test(\"returned JSON schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(contactSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{contact-list}}/contacts/{{idUser}}",
							"host": [
								"{{contact-list}}"
							],
							"path": [
								"contacts",
								"{{idUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contact List (all contacts)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const contactItems = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_id\": {\"type\": \"string\"},",
									"        \"firstName\": {\"type\": \"string\"},",
									"        \"lastName\": {\"type\": \"string\"},",
									"        \"birthdate\": {\"type\": \"string\"},",
									"        \"email\": {\"type\": \"string\"},",
									"        \"phone\": {\"type\": \"string\"},",
									"        \"street1\": {\"type\": \"string\"},",
									"        \"street2\": {\"type\": \"string\"},",
									"        \"city\": {\"type\": \"string\"},",
									"        \"stateProvince\": {\"type\": \"string\"},",
									"        \"postalCode\": {\"type\": \"string\"},",
									"        \"country\": {\"type\": \"string\"},",
									"        \"owner\": {\"type\": \"string\"},",
									"        \"__v\": {\"type\": \"integer\"},",
									"    },",
									"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\", \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
									"}",
									"",
									"const contactSchema = {",
									"    \"type\": \"array\",",
									"        \"items\": contactItems",
									"}",
									"",
									"pm.test(\"returned JSON schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(contactSchema);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"idUserDel\", jsonData[1]._id);",
									"pm.collectionVariables.set(\"idUserDel2\", jsonData[2]._id);",
									"pm.collectionVariables.set(\"idUserEdit\", jsonData[3]._id);",
									"pm.collectionVariables.set(\"idUserEdit2\", jsonData[4]._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{contact-list}}/contacts",
							"host": [
								"{{contact-list}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"successful request to get a contact returns a JSON body format\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Delete contacts",
			"item": [
				{
					"name": "Positive Path Tests",
					"item": [
						{
							"name": "Successful Delete a Contact (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{contact-list}}/contacts/:idDelete",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										":idDelete"
									],
									"variable": [
										{
											"key": "idDelete",
											"value": "{{idUserDel}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful Delete a Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{contact-list}}/contacts/:idDelete",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										":idDelete"
									],
									"variable": [
										{
											"key": "idDelete",
											"value": "{{idUserDel2}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									" /*",
									" const PreRequest = {",
									"  ",
									"  url: 'https://thinking-tester-contact-list.herokuapp.com/contacts',",
									"  method: 'GET',",
									"  header: {",
									"        'content-type': 'application/json',",
									"        'authorization': '{{token}}',",
									"    }",
									"};",
									"",
									"pm.sendRequest(PreRequest, function (err, response) {",
									"    var data = response.json();",
									"    pm.collectionVariables.set(\"idUser\", data[0].id);",
									"    pm.collectionVariables.set(\"idUser2\", data[1].id);",
									"});",
									"*/"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"request to get a delete a contact does'nt returns a JSON body format\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.not.be.json;",
									"});",
									"",
									"pm.test(\"the correct deletion message is returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Contact deleted\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative Path Tests",
					"item": [
						{
							"name": "Failure to Delete a Contact that does'nt exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{contact-list}}/contacts/:idDelete",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										":idDelete"
									],
									"variable": [
										{
											"key": "idDelete",
											"value": "52fefaae9d644e00150cb1f1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"a failure request to delete a contact does'nt returns a JSON body format\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.not.be.json;",
									"});",
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update contacts (PATCH)",
			"item": [
				{
					"name": "Negative Path Tests",
					"item": [
						{
							"name": "Failure to Update a Contact sending empty value to firstName field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.firstName.message).to.eql(\"Path `firstName` is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending  empty value to lastName field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.lastName.message).to.eql(\"Path `lastName` is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending  empty value to birthDate field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.birthdate.message).to.eql(\"Birthdate is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending invalid value to birthDate field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"wrongbirthdate\", \"dsfsd4fef\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.birthdate.message).to.eql(\"Birthdate is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{wrongbirthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending empty to email field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.email.message).to.eql(\"Email is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending invalid value to email field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidEmail\", \"ana@teste\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.email.message).to.eql(\"Email is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{invalidEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending invalid value to phone field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"invalidPhone\", \"54sd4f\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.phone.message).to.eql(\"Phone number is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"1994-12-01\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{invalidPhone}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const emptySchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"    \"errors\":{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"firstName\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": {\"type\": \"string\"},",
									"                    \"message\": {\"type\": \"string\"},",
									"                    \"properties\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\":{",
									"                            \"message\": {\"type\": \"string\"},",
									"                            \"type\": {\"type\": \"string\"},",
									"                            \"path\": {\"type\": \"string\"},",
									"                            \"value\": {\"type\": \"string\"}",
									"                        },",
									"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
									"                    },",
									"                    \"kind\": {\"type\": \"string\"},",
									"                    \"path\": {\"type\": \"string\"},",
									"                    \"value\": {\"type\": \"string\"},",
									"                },",
									"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
									"                },",
									"                \"_message\": {\"type\": \"string\"},",
									"                \"message\": {\"type\": \"string\"},",
									"            },",
									"        } ",
									"    },",
									"    \"required\": [\"errors\", \"message\", \"_message\"],",
									"};",
									"",
									"pm.test(\"returned schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(emptySchema);",
									"});",
									"",
									"pm.test(\"failure request to add a contact returns a JSON body format with correct fields\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Successful Update a Contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"birthdate\", \"1994-12-01\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const contactSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_id\": {\"type\": \"string\"},",
									"        \"firstName\": {\"type\": \"string\"},",
									"        \"lastName\": {\"type\": \"string\"},",
									"        \"birthdate\": {\"type\": \"string\"},",
									"        \"email\": {\"type\": \"string\"},",
									"        \"phone\": {\"type\": \"string\"},",
									"        \"street1\": {\"type\": \"string\"},",
									"        \"street2\": {\"type\": \"string\"}, ",
									"        \"city\": {\"type\": \"string\"},",
									"        \"stateProvince\": {\"type\": \"string\"},",
									"        \"postalCode\": {\"type\": \"string\"},",
									"        \"country\": {\"type\": \"string\"},",
									"        \"owner\": {\"type\": \"string\"}, ",
									"        \"__v\": {\"type\": \"integer\"}, ",
									"    },",
									"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\",  \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
									"};",
									"",
									"pm.test(\"Validate that returned schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(contactSchema);",
									"});",
									"",
									"pm.test(\"Validate that a successful request to update a contact returns a JSON body format\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{contact-list}}/contacts/{{idUserEdit2}}",
							"host": [
								"{{contact-list}}"
							],
							"path": [
								"contacts",
								"{{idUserEdit2}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update contacts (PUT)",
			"item": [
				{
					"name": "Negative Path Tests",
					"item": [
						{
							"name": "Failure to Update a Contact sending invalid value to phone field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidPhone\", \"112\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.phone.message).to.eql(\"Phone number is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{invalidPhone}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending empty to email field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.email.message).to.eql(\"Email is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending invalid value to email field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Email\", \"ana@teste\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.email.message).to.eql(\"Email is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{Email}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending empty value to firstName field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.firstName.message).to.eql(\"Path `firstName` is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending  empty value to lastName field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.lastName.message).to.eql(\"Path `lastName` is required.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending  empty value to birthDate field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.birthdate.message).to.eql(\"Birthdate is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failure to Update a Contact sending invalid value to birthDate field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"birthdate\", \"45542\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"correct error message is displayed\", function () {",
											"    var data = pm.response.json();",
											"    pm.expect(data.errors.birthdate.message).to.eql(\"Birthdate is invalid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{contact-list}}/contacts/{{idUser}}",
									"host": [
										"{{contact-list}}"
									],
									"path": [
										"contacts",
										"{{idUser}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const emptySchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"    \"errors\":{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"firstName\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"name\": {\"type\": \"string\"},",
									"                    \"message\": {\"type\": \"string\"},",
									"                    \"properties\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\":{",
									"                            \"message\": {\"type\": \"string\"},",
									"                            \"type\": {\"type\": \"string\"},",
									"                            \"path\": {\"type\": \"string\"},",
									"                            \"value\": {\"type\": \"string\"}",
									"                        },",
									"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
									"                    },",
									"                    \"kind\": {\"type\": \"string\"},",
									"                    \"path\": {\"type\": \"string\"},",
									"                    \"value\": {\"type\": \"string\"},",
									"                },",
									"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
									"                },",
									"                \"_message\": {\"type\": \"string\"},",
									"                \"message\": {\"type\": \"string\"},",
									"            },",
									"        } ",
									"    },",
									"    \"required\": [\"errors\", \"message\", \"_message\"],",
									"};",
									"",
									"pm.test(\"returned schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(emptySchema);",
									"});",
									"",
									"pm.test(\"failure request to add a contact returns a JSON body format with correct fields\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Successful Update a Contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"birthdate\", \"1994-12-01\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const contactSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"_id\": {\"type\": \"string\"},",
									"        \"firstName\": {\"type\": \"string\"},",
									"        \"lastName\": {\"type\": \"string\"},",
									"        \"birthdate\": {\"type\": \"string\"},",
									"        \"email\": {\"type\": \"string\"},",
									"        \"phone\": {\"type\": \"string\"},",
									"        \"street1\": {\"type\": \"string\"},",
									"        \"street2\": {\"type\": \"string\"},",
									"        \"city\": {\"type\": \"string\"},",
									"        \"stateProvince\": {\"type\": \"string\"},",
									"        \"postalCode\": {\"type\": \"string\"},",
									"        \"country\": {\"type\": \"string\"},",
									"        \"owner\": {\"type\": \"string\"},",
									"        \"__v\": {\"type\": \"integer\"},",
									"    },",
									"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\",  \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
									"};",
									"",
									"pm.test(\"returned schema is correct\", () => {",
									"    pm.response.to.have.jsonSchema(contactSchema);",
									"});",
									"",
									"pm.test(\"successful request to update a contact returns a JSON body format\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"birthdate\": \"{{birthdate}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"street1\": \"{{$randomStreetAddress}}\",\n    \"street2\": \"{{$randomStreetAddress}}\",\n    \"city\": \"{{$randomCity}}\",\n    \"stateProvince\": \"{{$randomCountryCode}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"country\": \"{{$randomCountry}}\" \n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{contact-list}}/contacts/{{idUserEdit}}",
							"host": [
								"{{contact-list}}"
							],
							"path": [
								"contacts",
								"{{idUserEdit}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					" const PreRequest = {",
					"  ",
					"  url: 'https://thinking-tester-contact-list.herokuapp.com/users/login',",
					"  method: 'POST',",
					"  header: {",
					"        'content-type': 'application/json',",
					"    },",
					"  body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({ email: 'carolina@teste.com', password: 'carolina' })",
					"    }",
					"};",
					"",
					"pm.sendRequest(PreRequest, function (err, response) {",
					"    var data = response.json();",
					"    pm.collectionVariables.set(\"token\", data.token);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "postalCode",
			"value": ""
		},
		{
			"key": "contact-list",
			"value": "https://thinking-tester-contact-list.herokuapp.com"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "birthdate",
			"value": ""
		},
		{
			"key": "idUser",
			"value": ""
		},
		{
			"key": "idUserDel",
			"value": ""
		},
		{
			"key": "idUserDel2",
			"value": ""
		},
		{
			"key": "idUserEdit",
			"value": ""
		},
		{
			"key": "idUserEdit2",
			"value": ""
		},
		{
			"key": "invalidPhone",
			"value": ""
		},
		{
			"key": "Email",
			"value": ""
		}
	]
}