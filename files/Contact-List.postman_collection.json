{
	"info": {
		"_postman_id": "b9a08fb6-049f-4138-87ee-42401a0aea97",
		"name": "Contact-List",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Succesfull Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"token\", jsonData.token);",
							"",
							"const userSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"user\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"_id\": { \"type\": \"string\" },",
							"                \"firstName\": { \"type\": \"string\" },",
							"                \"lastName\": { \"type\": \"string\" },",
							"                \"email\": { \"type\": \"string\" },",
							"                \"__v\": { \"type\": \"integer\" },",
							"            },",
							"            \"required\": [\"_id\", \"firstName\", \"lastName\", \"email\", \"__v\"]",
							"        },",
							"        \"token\": {\"type\": \"string\"},",
							"    },",
							"    \"required\": [\"user\", \"token\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(userSchema);",
							"});",
							"",
							"pm.test(\"Validate that a successful request return a JSON body format\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"carolina@teste.com\",\n    \"password\": \"carolina\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/users/login",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new Contact",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const contactSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"_id\": {\"type\": \"string\"},",
							"        \"firstName\": {\"type\": \"string\"},",
							"        \"lastName\": {\"type\": \"string\"},",
							"        \"birthdate\": {\"type\": \"string\"},",
							"        \"email\": {\"type\": \"string\"},",
							"        \"phone\": {\"type\": \"string\"},",
							"        \"street1\": {\"type\": \"string\"},",
							"        \"street2\": {\"type\": \"string\"},",
							"        \"city\": {\"type\": \"string\"},",
							"        \"stateProvince\": {\"type\": \"string\"},",
							"        \"postalCode\": {\"type\": \"string\"},",
							"        \"country\": {\"type\": \"string\"},",
							"        \"owner\": {\"type\": \"string\"},",
							"        \"__v\": {\"type\": \"integer\"},",
							"    },",
							"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\",  \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(contactSchema);",
							"});",
							"",
							"pm.test(\"Validate that a successful request to add a contact returns a JSON body format\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"idUser\", jsonData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Carla\",\n    \"lastName\": \"Silva\",\n    \"birthdate\": \"1994-11-25\",\n    \"email\": \"carolinna@teste.com\",\n    \"phone\": \"718888888\",\n    \"street1\": \"Rua Teste 2\",\n    \"street2\": \"Rua das APIS 2\",\n    \"city\": \"Ourinhos\",\n    \"stateProvince\": \"MG\",\n    \"postalCode\": \"3257444\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure to Add new Contact sending empty value to firstName field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const emptySchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"    \"errors\":{",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"firstName\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {\"type\": \"string\"},",
							"                    \"message\": {\"type\": \"string\"},",
							"                    \"properties\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\":{",
							"                            \"message\": {\"type\": \"string\"},",
							"                            \"type\": {\"type\": \"string\"},",
							"                            \"path\": {\"type\": \"string\"},",
							"                            \"value\": {\"type\": \"string\"}",
							"                        },",
							"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
							"                    },",
							"                    \"kind\": {\"type\": \"string\"},",
							"                    \"path\": {\"type\": \"string\"},",
							"                    \"value\": {\"type\": \"string\"},",
							"                },",
							"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
							"                },",
							"                \"_message\": {\"type\": \"string\"},",
							"                \"message\": {\"type\": \"string\"},",
							"            },",
							"        } ",
							"    },",
							"    \"required\": [\"errors\", \"message\", \"_message\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(emptySchema);",
							"});",
							"",
							"pm.test(\"Validate that a failure request to add a contact returns a JSON body format with correct fields\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate that correct error messages are displayed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Path `firstName` is required\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"Carolina\",\n    \"birthdate\": \"1994-12-01\",\n    \"email\": \"carolina@teste.com\",\n    \"phone\": \"71999999999\",\n    \"street1\": \"Rua Teste\",\n    \"street2\": \"Rua das APIS\",\n    \"city\": \"Salvador\",\n    \"stateProvince\": \"BA\",\n    \"postalCode\": \"40226590\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure to Add new Contact sending  empty value to lastName field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const emptySchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"    \"errors\":{",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"firstName\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {\"type\": \"string\"},",
							"                    \"message\": {\"type\": \"string\"},",
							"                    \"properties\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\":{",
							"                            \"message\": {\"type\": \"string\"},",
							"                            \"type\": {\"type\": \"string\"},",
							"                            \"path\": {\"type\": \"string\"},",
							"                            \"value\": {\"type\": \"string\"}",
							"                        },",
							"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
							"                    },",
							"                    \"kind\": {\"type\": \"string\"},",
							"                    \"path\": {\"type\": \"string\"},",
							"                    \"value\": {\"type\": \"string\"},",
							"                },",
							"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
							"                },",
							"                \"_message\": {\"type\": \"string\"},",
							"                \"message\": {\"type\": \"string\"},",
							"            },",
							"        } ",
							"    },",
							"    \"required\": [\"errors\", \"message\", \"_message\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(emptySchema);",
							"});",
							"",
							"pm.test(\"Validate that a failure request to add a contact returns a JSON body format with correct fields\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate that correct error messages are displayed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Path `lastName` is required\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Ana\",\n    \"lastName\": \"\",\n    \"birthdate\": \"1994-12-01\",\n    \"email\": \"carolina@teste.com\",\n    \"phone\": \"71999999999\",\n    \"street1\": \"Rua Teste\",\n    \"street2\": \"Rua das APIS\",\n    \"city\": \"Salvador\",\n    \"stateProvince\": \"BA\",\n    \"postalCode\": \"40226590\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure to Add new Contact sending  empty value to bithDate field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const emptySchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"    \"errors\":{",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"firstName\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {\"type\": \"string\"},",
							"                    \"message\": {\"type\": \"string\"},",
							"                    \"properties\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\":{",
							"                            \"message\": {\"type\": \"string\"},",
							"                            \"type\": {\"type\": \"string\"},",
							"                            \"path\": {\"type\": \"string\"},",
							"                            \"value\": {\"type\": \"string\"}",
							"                        },",
							"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
							"                    },",
							"                    \"kind\": {\"type\": \"string\"},",
							"                    \"path\": {\"type\": \"string\"},",
							"                    \"value\": {\"type\": \"string\"},",
							"                },",
							"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
							"                },",
							"                \"_message\": {\"type\": \"string\"},",
							"                \"message\": {\"type\": \"string\"},",
							"            },",
							"        } ",
							"    },",
							"    \"required\": [\"errors\", \"message\", \"_message\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(emptySchema);",
							"});",
							"",
							"pm.test(\"Validate that a failure request to add a contact returns a JSON body format with correct fields\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate that correct error messages are displayed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Ana\",\n    \"lastName\": \"Paula\",\n    \"birthdate\": \"\",\n    \"email\": \"carolina@teste.com\",\n    \"phone\": \"71999999999\",\n    \"street1\": \"Rua Teste\",\n    \"street2\": \"Rua das APIS\",\n    \"city\": \"Salvador\",\n    \"stateProvince\": \"BA\",\n    \"postalCode\": \"40226590\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure to Add new Contact sending invalid value to bithDate field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const emptySchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"    \"errors\":{",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"firstName\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {\"type\": \"string\"},",
							"                    \"message\": {\"type\": \"string\"},",
							"                    \"properties\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\":{",
							"                            \"message\": {\"type\": \"string\"},",
							"                            \"type\": {\"type\": \"string\"},",
							"                            \"path\": {\"type\": \"string\"},",
							"                            \"value\": {\"type\": \"string\"}",
							"                        },",
							"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
							"                    },",
							"                    \"kind\": {\"type\": \"string\"},",
							"                    \"path\": {\"type\": \"string\"},",
							"                    \"value\": {\"type\": \"string\"},",
							"                },",
							"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
							"                },",
							"                \"_message\": {\"type\": \"string\"},",
							"                \"message\": {\"type\": \"string\"},",
							"            },",
							"        } ",
							"    },",
							"    \"required\": [\"errors\", \"message\", \"_message\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(emptySchema);",
							"});",
							"",
							"pm.test(\"Validate that a failure request to add a contact returns a JSON body format with correct fields\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate that correct error messages are displayed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Ana\",\n    \"lastName\": \"Paula\",\n    \"birthdate\": \"01-01-2020\",\n    \"email\": \"carolina@teste.com\",\n    \"phone\": \"71999999999\",\n    \"street1\": \"Rua Teste\",\n    \"street2\": \"Rua das APIS\",\n    \"city\": \"Salvador\",\n    \"stateProvince\": \"BA\",\n    \"postalCode\": \"40226590\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure to Add new Contact sending empty to email field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const emptySchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"    \"errors\":{",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"firstName\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {\"type\": \"string\"},",
							"                    \"message\": {\"type\": \"string\"},",
							"                    \"properties\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\":{",
							"                            \"message\": {\"type\": \"string\"},",
							"                            \"type\": {\"type\": \"string\"},",
							"                            \"path\": {\"type\": \"string\"},",
							"                            \"value\": {\"type\": \"string\"}",
							"                        },",
							"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
							"                    },",
							"                    \"kind\": {\"type\": \"string\"},",
							"                    \"path\": {\"type\": \"string\"},",
							"                    \"value\": {\"type\": \"string\"},",
							"                },",
							"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
							"                },",
							"                \"_message\": {\"type\": \"string\"},",
							"                \"message\": {\"type\": \"string\"},",
							"            },",
							"        } ",
							"    },",
							"    \"required\": [\"errors\", \"message\", \"_message\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(emptySchema);",
							"});",
							"",
							"pm.test(\"Validate that a failure request to add a contact returns a JSON body format with correct fields\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate that correct error messages are displayed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Ana\",\n    \"lastName\": \"Carolina\",\n    \"birthdate\": \"1994-12-01\",\n    \"email\": \"\",\n    \"phone\": \"71999999999\",\n    \"street1\": \"Rua Teste\",\n    \"street2\": \"Rua das APIS\",\n    \"city\": \"Salvador\",\n    \"stateProvince\": \"BA\",\n    \"postalCode\": \"40226590\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure to Add new Contact sending invalid value to email field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const emptySchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"    \"errors\":{",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"firstName\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {\"type\": \"string\"},",
							"                    \"message\": {\"type\": \"string\"},",
							"                    \"properties\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\":{",
							"                            \"message\": {\"type\": \"string\"},",
							"                            \"type\": {\"type\": \"string\"},",
							"                            \"path\": {\"type\": \"string\"},",
							"                            \"value\": {\"type\": \"string\"}",
							"                        },",
							"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
							"                    },",
							"                    \"kind\": {\"type\": \"string\"},",
							"                    \"path\": {\"type\": \"string\"},",
							"                    \"value\": {\"type\": \"string\"},",
							"                },",
							"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
							"                },",
							"                \"_message\": {\"type\": \"string\"},",
							"                \"message\": {\"type\": \"string\"},",
							"            },",
							"        } ",
							"    },",
							"    \"required\": [\"errors\", \"message\", \"_message\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(emptySchema);",
							"});",
							"",
							"pm.test(\"Validate that a failure request to add a contact returns a JSON body format with correct fields\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate that correct error messages are displayed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Ana\",\n    \"lastName\": \"Carolina\",\n    \"birthdate\": \"1994-12-01\",\n    \"email\": \"email-invalid-format\",\n    \"phone\": \"71999999999\",\n    \"street1\": \"Rua Teste\",\n    \"street2\": \"Rua das APIS\",\n    \"city\": \"Salvador\",\n    \"stateProvince\": \"BA\",\n    \"postalCode\": \"40226590\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure to Add new Contact sending invalid value to phone field",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const emptySchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"    \"errors\":{",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"firstName\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"name\": {\"type\": \"string\"},",
							"                    \"message\": {\"type\": \"string\"},",
							"                    \"properties\": {",
							"                        \"type\": \"object\",",
							"                        \"properties\":{",
							"                            \"message\": {\"type\": \"string\"},",
							"                            \"type\": {\"type\": \"string\"},",
							"                            \"path\": {\"type\": \"string\"},",
							"                            \"value\": {\"type\": \"string\"}",
							"                        },",
							"                        \"required\": [\"message\", \"type\", \"path\", \"value\"], ",
							"                    },",
							"                    \"kind\": {\"type\": \"string\"},",
							"                    \"path\": {\"type\": \"string\"},",
							"                    \"value\": {\"type\": \"string\"},",
							"                },",
							"                \"required\": [\"name\", \"message\", \"properties\", \"kind\", \"path\", \"value\"],",
							"                },",
							"                \"_message\": {\"type\": \"string\"},",
							"                \"message\": {\"type\": \"string\"},",
							"            },",
							"        } ",
							"    },",
							"    \"required\": [\"errors\", \"message\", \"_message\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(emptySchema);",
							"});",
							"",
							"pm.test(\"Validate that a failure request to add a contact returns a JSON body format with correct fields\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate that correct error messages are displayed\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Phone number is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Ana\",\n    \"lastName\": \"Carolina\",\n    \"birthdate\": \"1994-12-01\",\n    \"email\": \"test@test.com\",\n    \"phone\": \"719\",\n    \"street1\": \"Rua Teste\",\n    \"street2\": \"Rua das APIS\",\n    \"city\": \"Salvador\",\n    \"stateProvince\": \"BA\",\n    \"postalCode\": \"40226590\",\n    \"country\": \"Brazil\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Contact by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const contactSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"_id\": {\"type\": \"string\"},",
							"        \"firstName\": {\"type\": \"string\"},",
							"        \"lastName\": {\"type\": \"string\"},",
							"        \"birthdate\": {\"type\": \"string\"},",
							"        \"email\": {\"type\": \"string\"},",
							"        \"phone\": {\"type\": \"string\"},",
							"        \"street1\": {\"type\": \"string\"},",
							"        \"street2\": {\"type\": \"string\"},",
							"        \"city\": {\"type\": \"string\"},",
							"        \"stateProvince\": {\"type\": \"string\"},",
							"        \"postalCode\": {\"type\": \"string\"},",
							"        \"country\": {\"type\": \"string\"},",
							"        \"owner\": {\"type\": \"string\"},",
							"        \"__v\": {\"type\": \"integer\"},",
							"    },",
							"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\",  \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
							"};",
							"",
							"pm.test(\"Validate that returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(contactSchema);",
							"});",
							"",
							"pm.test(\"Validate that a successful request to get a contact returns a JSON body format\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{contact-list}}/contacts/{{idUser}}",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts",
						"{{idUser}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Contacts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//newman run Contact\\ List.postman_collection.json -e Contact\\ List.postman_collection.json -r htmlextra",
							"",
							"const contactItems = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"_id\": {\"type\": \"string\"},",
							"        \"firstName\": {\"type\": \"string\"},",
							"        \"lastName\": {\"type\": \"string\"},",
							"        \"birthdate\": {\"type\": \"string\"},",
							"        \"email\": {\"type\": \"string\"},",
							"        \"phone\": {\"type\": \"string\"},",
							"        \"street1\": {\"type\": \"string\"},",
							"        \"street2\": {\"type\": \"string\"},",
							"        \"city\": {\"type\": \"string\"},",
							"        \"stateProvince\": {\"type\": \"string\"},",
							"        \"postalCode\": {\"type\": \"string\"},",
							"        \"country\": {\"type\": \"string\"},",
							"        \"owner\": {\"type\": \"string\"},",
							"        \"__v\": {\"type\": \"integer\"},",
							"    },",
							"    \"required\": [\"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\", \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \"country\", \"owner\", \"__v\"],",
							"}",
							"",
							"const contactSchema = {",
							"    \"type\": \"array\",",
							"        \"items\": contactItems",
							"}",
							"",
							"pm.test(\"Validate that a returned schema is correct\", () => {",
							"    pm.response.to.have.jsonSchema(contactSchema);",
							"});",
							"",
							"pm.test(\"Validate that a successful request to get a contact returns a JSON body format\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{contact-list}}/contacts",
					"host": [
						"{{contact-list}}"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		}
	]
}